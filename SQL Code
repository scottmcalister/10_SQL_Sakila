#1a. You need a list of all the actors who have Display the first and last names of all actors from the table actor. 
use sakila;
SELECT first_name, last_name
FROM actor;


#1b. Display the first and last name of each actor in a single column in upper case letters. Name the column Actor Name. 
SELECT concat('first_name', ' ', 'last_name') as Actor_Name
From actor;


#2a. You need to find the ID number, first name, and last name of an actor, of whom you know only the first name, "Joe." 
#What is one query would you use to obtain this information?
SELECT actor_id, first_name, last_name
FROM actor
WHERE fist_name = 'Joe';


#2b. Find all actors whose last name contain the letters GEN:
SELECT last_name, first_name
FROM actor
WHERE last_name LIKE '%GEN%';


#2c. Find all actors whose last names contain the letters LI. This time, order the rows by last name and first name, in that order:
SELECT last_name, first_name
FROM actor
WHERE last_name LIKE '%LI%'
ORDER BY last_name, first_name;


#2d. Using IN, display the country_id and country columns of the following countries: Afghanistan, Bangladesh, and China:
SELECT country_id, country
FROM country
WHERE country IN ('Afghanistan', 'Bangladesh', 'China');


#3a. Add a middle_name column to the table actor. Position it between first_name and last_name. Hint: you will need to specify the data type.
ALTER TABLE actor
ADD COLUMN middle_name VARCHAR(45);


#3b. You realize that some of these actors have tremendously long last names. Change the data type of the middle_name column to blobs.
ALTER TABLE actor
MODIFY middle_name BLOB;


#3c. Now delete the middle_name column.
ALTER TABLE actor
DROP COLUMN middle_name;


#4a. List the last names of actors, as well as how many actors have that last name.
SELECT last_name, COUNT(last_name)
FROM actor;


#4b. List last names of actors and the number of actors who have that last name, but only for names that are shared by at least two actors
SELECT last_name, COUNT(last_name) as 'Count of last name'
FROM actor
GROUP BY last_name
HAVING COUNT(last_name) >=2;


#4c. Oh, no! The actor HARPO WILLIAMS was accidentally entered in the actor table as GROUCHO WILLIAMS, the name of Harpo's second cousin's husband's yoga teacher.
# Write a query to fix the record.
UPDATE actor
SET first_name = 'Harpo'
WHERE first_name = 'Groucho' and last_name = 'Williams';


#4d. Perhaps we were too hasty in changing GROUCHO to HARPO. It turns out that GROUCHO was the correct name after all! In a single query, if the first name of the actor is currently HARPO, 
#change it to GROUCHO. Otherwise, change the first name to MUCHO GROUCHO, as that is exactly what the actor will be with the grievous error. BE CAREFUL NOT TO CHANGE THE FIRST NAME OF EVERY ACTOR 
#TO MUCHO GROUCHO, HOWEVER! (Hint: update the record using a unique identifier.)
UPDATE actor
SET first_name = 
	CASE
	WHEN first_name = 'Harpo'
	THEN 'Groucho'
	ELSE 'Mucho Groucho'
	end
	WHERE actor_id = 172;

#5a. You cannot locate the schema of the address table. Which query would you use to re-create it?
CREATE TABLE address (
	address_id smallint(5) NOT NULL AUTO_INCREMENT,
    address VARCHAR(50) NOT NULL,
    address2 VARCHAR(50) DEFAULT NULL,
    district VARCHAR(20) NOT NULL,
    city_id smallint(5) NOT NULL,
    postal_code VARCHAR(10) DEFAULT NULL,
    phone VARCHAR(15) NOT NULL,
    location GEOMETRY NOT NULL,
    last_update timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	PRIMARY KEY(address_id),
    KEY idx_fk_city_id (city_id),
    SPATIAL KEY idx_location (location),
    CONSTRAINT fk_address_city FOREIGN KEY (city_id) REFERENCES city (city_id) ON UPDATE CASCADE
);


#6a. Use JOIN to display the first and last names, as well as the address, of each staff member. Use the tables staff and address:
SELECT first_name, last_name, address
FROM staff AS s
INNER JOIN address AS a
ON s.address_id = a.address_id;


#6b. Use JOIN to display the total amount rung up by each staff member in August of 2005. Use tables staff and payment. 
SELECT first_name, last_name, SUM(amount)
FROM staff AS s
INNER JOIN payment AS p
ON s.staff_id = p.staff_id
GROUP BY p.staff_id;

#6c. List each film and the number of actors who are listed for that film. Use tables film_actor and film. Use inner join.
SELECT title, Count(actor_id)
FROM film as f
INNER JOIN film_actor as fa
ON f.film_id = fa.film_id
GROUP by title;


#6d. How many copies of the film Hunchback Impossible exist in the inventory system?
SELECT title, COUNT(inventory_id)
FROM film as f
INNER JOIN inventory as i
ON f.film_id = i.film_id
WHERE title = 'Hunchback Impossible';


#6e. Using the tables payment and customer and the JOIN command, list the total paid by each customer. List the customers alphabetically by last name:
SELECT last_name, first_name, sum(amount)
FROM payment as p
INNER JOIN customer as c
ON p.cutomer_id = c.customer_id
GROUP BY p.customer_id
ORDER BY last_name ASC;


#7a. The music of Queen and Kris Kristofferson have seen an unlikely resurgence. As an unintended consequence, films starting with the letters K and Q have also soared in popularity. 
#Use subqueries to display the titles of movies starting with the letters K and Q whose language is English. 
SELECT title 
FROM film
WHERE language_id in	
	(SELECT language_id
    FROM language
    WHERE name = 'English')
AND (title LIKE 'Kr%') OR (title LIKE 'QU%');


#7b. Use subqueries to display all actors who appear in the film Alone Trip.
SELECT last_name, first_name
FROM actor
WHERE actor_id IN
	(SELECT actor_id 
    FROM film_actor
    WHERE film_id IN
		(SELECT film_id 
        FROM film
        WHERE title = 'Alone Trip')
        );


#7c. You want to run an email marketing campaign in Canada, for which you will need the names and email addresses of all Canadian customers. 
#Use joins to retrieve this information.
SELECT country, last_name, first_name, email
FROM country as c
LEFT JOIN customer as cu
ON c.country_id = cu.customer_id
WHERE country = 'Canada';


#7d. Sales have been lagging among young families, and you wish to target all family movies for a promotion. 
#Identify all movies categorized as famiy films.
SELECT title, category
FROM film_list
WHERE category = 'Family';


#7e. Display the most frequently rented movies in descending order.
SELECT i.film_id, f.title, COUNT(r.inventory_id)
FROM inventory as i
INNER JOIN rental as r
ON i.inventory_id = r.inventory_id
INNER JOIN film_text as ft
ON i.film_id = ft.film_id
GROUP BY store.store_id
ORDER BY sum(amount);


#7f. Write a query to display how much business, in dollars, each store brought in.
SELECT store.store_id, SUM(amount)
FROM store
INNER JOIN staff
ON store.store_id = staff.store_id
INNER JOIN payment
ON payment.staff_id = staff.staff_id
GROUP BY store.store_id
ORDER BY SUM(amount);


#7g. Write a query to display for each store its store ID, city, and country.#
SELECT s.store_id, city, country
FROM store as s
INNER JOIN customer as cu
ON s.store_id = cu.store_id
INNER JOIN staff as st
ON s.store_id = st.store_id
INNER JOIN address as a
ON cu.address_id = a.address_id
INNER JOIN city as c
ON a.city_id = c.city_id
INNER JOIN country as cou
ON c.country_id = cou.country_id
WHERE country = 'Canada' and country = 'Australia';


#7h. List the top five genres in gross revenue in descending order. (Hint: you may need to use the following tables: category, film_category, inventory, payment, and rental.)
SELECT name, SUM(p.amount)
FROM category as c
INNER JOIN film_category as fc
INNER JOIN inventory as i
ON i.film_id = fc.film_id
INNER JOIN rental as r
ON r.inventory_id = i.inventory_id
INNER JOIN payment as p
GROUP BY name;


#8a. In your new role as an executive, you would like to have an easy way of viewing the Top five genres by gross revenue. 
#Use the solution from the problem above to create a view. If you haven't solved 7h, you can substitute another query to create a view.
CREATE VIEW top_five_grossing_genres AS

SELECT name, SUM(p.amount)
FROM category as c
INNER JOIN film_category as fc
INNER JOIN inventory as i
ON i.film_id = fc.film_id
INNER JOIN rental as r
ON r.inventory_id = i.inventory_id
INNER JOIN payment as p
GROUP by name;


#8b. How would you display the view that you created in 8a?
SELECT *
FROM top_five_grossing_genres;


#8c. You find that you no longer need the view top_five_genres. Write a query to delete it.
DROP VIEW top_five_grossing_genres;


